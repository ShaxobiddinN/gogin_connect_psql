package main

import (
	"net/http"

	"http-server/docs"
	_ "http-server/docs" // docs is generated by Swag CLI, you have to import it.
	"http-server/handlers"
	"http-server/storage"
	"http-server/storage/postgres"

	"github.com/gin-gonic/gin"
	swaggerFiles "github.com/swaggo/files"     // swagger embed files
	ginSwagger "github.com/swaggo/gin-swagger" // gin-swagger middleware
)

// @contact.name   API Article
// @contact.url    http://www.johndoe.com
// @contact.email  johndoe@swagger.io
// @license.name  Apache 2.0
// @license.url   http://www.apache.org/licenses/LICENSE-2.0.html
func main() {
	docs.SwaggerInfo.Title="Swagger Example info"
	docs.SwaggerInfo.Description="This is a simple server Petstore server"
	docs.SwaggerInfo.Version="2.0"

	var err error
	var stg storage.StorageI
	stg, err = postgres.InitDb("user=admin password=postgres dbname=article_db sslmode=disable")

	if err != nil {
		panic(err)
	}

	r := gin.Default()
	r.GET("/ping", func(c *gin.Context) {
		c.JSON(http.StatusOK, gin.H{
			"message": "pong",
		})
	})

	h:=handlers.Handler{
		Stg: stg,
	}
	v1 := r.Group("/v1")
	{
		v1.POST("/article", h.CreateArticle)
		v1.GET("/article/:id", h.GetArticleById)
		v1.GET("/article", h.GetArticleList)	
		v1.PUT("/article", h.UpdateArticle)
		v1.DELETE("/article/:id", h.DeleteArticle)

		v1.POST("/author", h.CreateAuthor)
		v1.GET("/author/:id", h.GetAuthorById)
		v1.GET("/author", h.GetAuthorList)	
		v1.PUT("/author", h.UpdateAuthor)
		v1.DELETE("/author/:id", h.DeleteAuthor)
	}

	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))
	r.Run() // listen and serve on 0.0.0.0:8080 (for windows "localhost:8080")
}
